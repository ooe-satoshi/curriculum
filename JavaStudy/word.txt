テーマ：ITとは？
-IT
Information Technologyの頭文字をとったもので、パソコン、インターネット、セキュリティや情報処理を含めた情報技術のことを指す
ほぼ同じ意味を持つICTがあるが、こちらは情報技術だけでなく、コミュニケーションの意味がより強調されたもの
ITが活用される分野は幅広く、医療や交通機関、農業、自動車といった分野で活用される
ITの発達により、無人レジやドローン配達、自動運転、スマートホーム化なども実現できる

参考：
https://www.internetacademy.jp/it/programming/programming-basic/it_usage_something_field.html#chapter1




テーマ：OS
-OS
Operatin Systemの略で、ハードウェアとソフトウエアの仲介役を担い、PCの基本的な機能を行う
例）入力した文字が、画面に出力される。イアフォンを指すとそこから音が聞こえる等
またアプリ開発になくてはならないものであり、アプリを同時に複数起動できるタスク管理やファイル操作もOSの機能のおかげ
種類も豊富にあり、代表的なのはwindows, mac またはlinuxがある

参考：
https://www.sejuku.net/blog/6084



-Windows
マイクロソフト社が開発したOSの一種であり、ビジネス用に開発されているソフトウェアはwindows向けが多い
PC本体はマイクロソフト社以外のメーカーも開発する
現在のOSは、windowsが主流

参考：
https://sakidori.co/article/96368



-macOS
Apple社が開発したOSの一種であり、Macintosh専用のOS
ユーザーフレンドリーであり、統一性のある操作が可能

参考：
https://eng-entrance.com/programming-os#macOS



-UNIX
Osの一種であり、特徴として安全性が高く、機能が少ないため比較的動作は軽い
カーナビや携帯電話にも使用されている
macOSもUNIXである
企業が開発しており、知的財産権が企業に属している

参考：
https://eng-entrance.com/unix_linux#Unix



-Linux
Osの一種であり、UNIXと同様安定しており、費用がかからない
AndroidのスマートフォンはLinuxを使用している
こちらはオープンソースのため、無料で使用可能
改変も配布も自由
UNIXを元に開発されライセンスは特に存在しない

参考：
https://eng-entrance.com/unix_linux#Unix




テーマ：言語・環境
-HTML
Hyper Text Markup Languageの略で、webページを作成するために必要なマークアップ言語の１つ
HTMLでは、文章の表示方法やハイパーリンクをタグと呼ばれるマークで表現することで、文章に意味を付け加える
例）<title>タイトル名</title>
上記の例にあるかたまりを要素と呼ぶ
Webページにリンクや画像を埋め込むことが可能

参考：
https://techacademy.jp/magazine/4843#sec1



-CSS
Webページのデザインを指定する言語
HTML内の要素をどのように修飾するかを決める
HTMLとは別ファイルで用意することが多い
HTML内NO要素名やID、クラス名に対して見た目を指定可能

参考：
http://www.htmq.com/csskihon/001.shtml



-MySQL
データベースの一種であり、データの保管・更新・削除・検索の操作が可能（CRUD機能）
複数のOSで利用が可能であり、オープンソースのため基本的には無料
動作させるためにはwebサーバーやアプリケーションが必要

参考：
https://www.kagoya.jp/howto/webhomepage/mysql/



-PHP
プログラミング言語の一種であり、HTMLに埋め込むことができるため、web開発でよく使用されているスクリプト言語
PHPはサーバーサイドでコードが実行されるため、MySQLといったデータベースと連携してクライアントから送信された
データを受け取り、HTMLに表示させたり保存したりすることが可能

参考：
https://techacademy.jp/magazine/6618#sec1



-JavaScript
プログラミング言語であり、cssではできないエフェクトや動きをつけたりできる
例）検索エンジンにて検索候補が出る、パスワード入力時に適切な文字が入力されているかチェックする
上記のようなパスワードの認証プロセスでは、通常はサーバーを介して処理されるが、
JavaScriptではフロントサイドでコードが実行されるため、クライアント側で処理が可能
→サーバーと必要な情報のみ送受信をするため、その分時短でき高速で処理が可能

参考：
https://techacademy.jp/magazine/8801#sec1



-jQuery
JavaScriptをより簡単に記述することを実現するJSのライブラリ
特徴は１ブラウザの違いを意識する必要がない、２HTMLのDOM操作が簡単にできること、３Ajax処理が簡単にできること
１、JSはブラウザに搭載されたエンジンによって記述が微妙に変わるが、jQueryは自動でその違いを修正してくれる
２、HTMLファイルからDOMを検索して取得する処理が簡単
３、通常の同期通信と比べて、非同期通信は必要な情報のみをやり取りするが、この処理を簡単に記述できる
これによりSPA(Single Page Application)という画面遷移せずにインタラクティブな多目的操作ができるアプリケーションを
提供する方法も増えた

参考；
https://techacademy.jp/magazine/9444#sec1



-Apache
Webサーバーソフトウエアの１つであり、無料で利用でき、osに依存しない
高い安定性と軽快な動作が可能
基本的にHTTPリクエストの処理をする

参考：
https://xtech.nikkei.com/it/article/COLUMN/20080501/300520/



-Bootstrap
CSSのフレームワークであり、よく使われるスタイルが予め定義されてあるため、
記法に沿って利用すれば、簡単に整ったデザインのページ作成が可能

参考：
https://techacademy.jp/magazine/6270#sec1



テーマ：エンジニアなど
-SE
システムエンジニアを指し、主にクライアントとシステム設計の要件を詰めたり、その詳細や使用を決めていく
プログラマーの上位職である。プログラマーの進捗管理等を行う

参考：
https://mynavi-agent.jp/it/jobindex/04.html



-PG
SEの作成した仕様書を元にシステムのプログラムを書く職種
質問力や自信の進捗共有、詳細設計の仕様書の理解力が求められる

参考：
https://boxil.jp/mag/a5543/#5543-1



-webデザイナー
クライアントから依頼されたwebサイトのデザインをグラフィックソフトを使用して作成して、全体の構成を
考えながらデザインを構築していく
HTMLやCSSを使用してサイト制作をする

参考：
https://www.internetacademy.jp/it/design/web-design.html#chapter1



テーマ：ユーザーインターフェース
-CUI
WindowsのコマンドプロンプトやMacのターミナルにて、コマンドをキーボードで入力してOSの操作をする
コマンドラインと呼ばれる
UNIXやLinuxなどのOS、シスコ社製のルーターなど機器の操作・保守管理、SQL言語を用いたデータベースの操作などで使われている

参考：
https://www.pc-master.jp/words/cui-gui.html



-GUI
CUIと違い、マウスやタッチパネルを使用して直接操作するため、コマンドを知らなくても操作が可能
例）アイコンをマウスでクリックしてアプリを起動する、ファイルを開くなど

参考：
https://www.pc-master.jp/words/cui-gui.html



テーマ：ファイルとディレクトリ
-ファイル
データそのものを指し、データファイル、プログラムファイル、システムファイルなどがある

参考：
https://freeks-japan.blog/java/1/14/



-ディレクトリ
フォルダのことを指し、複数のファイルを１つのディレクトリに格納して階層構造になっている

参考：
https://www.pc-master.jp/words/directory.html



-ルートディレクトリ
Windowsでは、Cドライブのディスクを開いて一番最初にフォルダがある場所、階層構造の一番上にある場所を指す

参考：
https://www.pc-master.jp/words/directory.html



-カレントディレクトリ
現在いるディレクトリまたは作業中のディレクトリを指す

参考：
https://www.pc-master.jp/words/directory.html



-パス
ディレクトリやファイルの保存場所が記されている経路のようなもの

参考：
https://www.pc-master.jp/words/directory.html



-絶対パス
ルートディレクトリからの経路を表す

参考：
https://www.pc-master.jp/words/directory.html



-相対パス
カレントディレクトリからの経路を表す

参考：
https://www.pc-master.jp/words/directory.html



テーマ：各種プロトコル
-HTTP
Hyper Text Transfer Protocolとは、ホームページ内の文字、画像や動画といったデータをサーバーとクライアント間で通信する時の通信規約
→htmlファイルや画像ファイルを自分のパソコンにダウンロードする手順のこと
→webページを呼び出すプロトコル
Osやネットの環境が異なっても、同じ手順でホームページのデータのやり取りが可能
しかし、通信内容の暗号化がされていないため、通信内容の盗聴や改ざんが行われる恐れあり

参考：
https://cybersecurity-jp.com/security-measures/25772#HTTP



-FTP
File Transfer Protocolとは、サーバー・クライアント間でファイルの送受信を行う際の決まり事
手元のファイルを転送してデータの新規追加、更新、削除をして、webサーバーの内容を更新する
通信手段であり、要所に設置して通信全体をつなげる仕組み

参考：
https://www.kagoya.jp/howto/network/ftp/



-HTTPS
HTTPと同じプロトコルだが、SSL/TLSというプロトコルが使用されている
HTTPに比べて、通信を暗号化することによりセキュアな通信が可能
暗号化以外にも、通信先のサーバが正当な所有者のものであることを保証する
「証明書（SSLサーバ証明書）」があるため、信用性が高い
S→secure

参考：
https://cybersecurity-jp.com/security-measures/25772#HTTP



-SSL/TLS
Secure Sockets Layerの略で、送受信するデータを暗号化する通信手順
SSLとTLS（Transport Layer Security）に大きな違いはない
データの盗聴、改ざん、なりすましを防ぐ役割を担っている

参考：
https://www.kagoya.jp/howto/rentalserver/ssl/#:~:text=SSL%E3%81%A8%E3%81%AFSecure%20Sockets,%E5%8C%96%E3%81%99%E3%82%8B%E9%80%9A%E4%BF%A1%E6%89%8B%E9%A0%86%E3%81%A7%E3%81%99%E3%80%82



-SSH
Secure Shellとは、ネットワークに接続された機器を遠隔操作し、管理するための手段
VPS（バーチャル・プライベート・サーバー）などの各種サーバー機器は遠隔の場所にあるため、
安全に操作するには必要不可欠（レンタルサーバーでは使われない）
SSLと混同しやすい
ーーーーーーーーーーーーーーーーーーーーーーーーーーーー
　　　　　　　SSH        　　　　 SSL
目的　　サーバーへの接続　　　　webサイトを安全に表示
対象者　サーバー管理者        webサイトの閲覧者
ーーーーーーーーーーーーーーーーーーーーーーーーーーーー

参考：
https://www.kagoya.jp/howto/rentalserver/ssh/



-ポート、ポート番号
コンピューターの内部にある各サービスを識別するための番号で、IPアドレスだけではコンピューターが提供するサービスまでは指定できない
コンピューターが提供するwebサービスやメールサービスといったものにアクセスするために必要なもの
数字の範囲によって用途が決められている
Webサーバーなら80番

参考：
https://www.cman.jp/network/term/port/



-HTTP、FTP、SSHの各ポート番号
HTTP: 80番
FTP:　20番 (データコネクション)・21番 (制御コネクション)
SSH: 22番（デフォルト）



-ファイアウォール
企業内部のデータを外部から不正アクセスされ、データの盗聴・改ざん等を防ぐ防火壁
不正アクセスがあった場合は、管理者に通報できるように設計されており、
高いセキュリティを保つための機能を多く持っているものもある

参考：
https://www.hs-juniperproducts.jp/check/firewall.html



-TCP
Transmission Control Protocolとは、ネットワーク通信ルールの１つ
HTTPはTCP上で動作している

参考：
https://qiita.com/ryosuketter/items/ba54d595a31f4ad0a58f



テーマ：IPアドレス
-IPアドレス
PCやスマホといったネットに接続された機器を識別するためのもので、住所のような役割を担っている
全て数字で表記される

参考：
https://www.kagoya.jp/howto/network/ipaddress/



-グローバルIPアドレス
インターネットに接続するIPアドレス
動的・静的IPアドレスの２種類があり、接続する度IPアドレスが変わるか変わらないか

参考：
https://www.kagoya.jp/howto/network/ipaddress/



-プライベートIPアドレス
インターネットに接続しないIPアドレス
家庭内のネットワークにあるパソコンなどに付与されているIPアドレス

参考：
https://www.kagoya.jp/howto/network/ipaddress/



テーマ：ドメイン
-ドメイン
接続先のサーバーを指定する。IPアドレスでも可能
URLの一部、メールアドレスならば@以降のもの
数字で表記されるIPアドレスに比べ、ドメインは文字列で表記されるため覚えやすい
ーーーーーーーーーーーーーーーー
https://www.google.com/
https : スキーム名(プロトコル名) 
www : ホスト名
google.com : ドメイン名
ーーーーーーーーーーーーーーーー
参考：
https://www.kagoya.jp/howto/webhomepage/01/



-DNS
Domain Name Systemとは、ドメインを利用してコンピューターに接続する際に、ドメインをIPアドレスに変換する仕組み
PC同士の接続はIPアドレスが利用されるため、文字列であるドメインを変換する必要があるため、DNSを使用する


-VPN (Virtual Private Network)
暗号化技術で、仮想的に専用線のように安全な通信回線を実現する方法
外出先といった遠隔地から社内にアクセスする場合、インターネット経由で接続しても、VPNなら安全な通信を実現できる



-ブリッジ
転送されてきたパケット(情報のかたまり)をメモリ上に保存して、送信先を確認して送信先が接続されているポートのみにデータを転送する方法



-プロキシサーバー
内部ネットワークとインターネットの中継をする役割を持つサーバーで、情報の受け渡しをする
プロキシ上でウィルスチェックができる、負荷分散などのメリットがある

参考：
https://cybersecurity-jp.com/security-measures/32171#i



テーマ：電子メール
-SMTP (Simple Mail Transfer Protocol)
メールを送信する仕組み、メールを相手のメールサーバーまで届ける

参考：
https://time-space.kddi.com/ict-keywords/kaisetsu/20170824/2081



-POP (Post Office Protocol)
メールを受信する仕組み、メールソフトが自動的にメールサーバーにアクセスしてメールをダウンロードする

参考：
https://time-space.kddi.com/ict-keywords/kaisetsu/20170824/2081



-IMAP (Internet Message Access Protocol)
POPと同じくメールを取り込むための手順、その違いは、メールをサーバーに残すか残さないか
POP → 一度メールをスマホやPCにダウンロードして取り込むと、サーバーから消える
IMAP → ダウンロードするのはメールのいわばコピー（キャッシュ）で、メール本体はサーバーにいつまでも残ったまま
　　　　 ユーザーのメールはサーバーが管理してくれる

参考：
https://time-space.kddi.com/ict-keywords/kaisetsu/20170824/2081




テーマ：セッションとクッキー
-セッション
クッキーと同じくサーバー上の一時ディレクトリに保存されたデータのこと
このデータは、ユーザーがWebサイトにいる間、サイト上のすべてのページで利用可能
接続中のユーザーの活動に関連する情報を一時的に保存
例）ショッピングサイトにて、カートに商品を入れサイトを離れた後、再度戻ってきた時にカート内の商品が入ったままになっている
セッションデータは、セッションIDと紐付けてwebサーバー上で管理されるため、クッキーを利用してIDを送信し、サーバーが保存している
セッションデータを参照する流れになる
クッキーは「誰が」の情報を取得し、セッションは「何をしたか？」という情報を取得する

参考：
https://ssaits.jp/promapedia/technology/cookie-session-cache.html#toc_id_4_3




-クッキー
ユーザーのコンピューターに保存される小さなファイルのこと
セッションクッキーと永続クッキーの２種類がある
セッションクッキーは、Webサイトにアクセスしている間、ブラウザに一時的に作成され、ユーザーがサイトを離れると削除される
永続クッキーはユーザーがブラウザを閉じても削除されず、そのクッキーを作成したWebサイトにアクセスすると再度アクティブになる
クッキーファイル内で設定された期間中ブラウザに残る

クッキーファイル(ブラウザのメモリ)には、以下のことが保存される
・クッキーが送信されたサーバーの名前
・クッキーの有効期間
・値 （通常はランダムに生成された一意の番号）

参考：
https://ssaits.jp/promapedia/technology/cookie-session-cache.html#toc_id_4_3


（セッションとクッキーの違い）
　　　　　　　　　セッション　　　　　　　　　　　クッキー
保存場所　　　ブラウザとサーバー　　　　　　　クライアント側のマシン　　　　
　　　　　　　　　　　　　　　　　　　　　　　（主にブラウザ）
保存期間　　ユーザーがブラウザを閉じるか、　　永続クッキーがあり、
　　　　　　サイトを離れると削除される　　　　情報を保持し続ける
無効化　　　　　　できない　　　　　　　　　　　　できる

-キャッシュ
頻繁にアクセスされるコンテンツを保存し、その情報を呼び出すことで表示速度を高速化する仕組み
キャッシュが表示の高速化のために情報を保存
クッキーやセッションはユーザーの行動を覚え、機能をサポートするためにユーザーの情報を保存

参考：
https://ssaits.jp/promapedia/technology/cookie-session-cache.html#toc_id_4_3




テーマ：DB（データベース）について
-チューニング
データベースを操作するにはSQLを使用するが、それを目的の処理結果を変えずに最適化することを指す
SQLチューニングが必要な状態とは、アプリケーションのパフォーマンスに問題がある状態を指す

参考：
https://qiita.com/nanairoGlasses/items/b20d4f0d0fe924a6b116



-スロークエリ
処理に時間がかかるSQLを指す

参考：
http://cloudeo.jp/word/glossary/slowquery.html#:~:text=%E3%82%B9%E3%83%AD%E3%83%BC%E3%82%AF%E3%82%A8%E3%83%AA-,%E3%82%B9%E3%83%AD%E3%83%BC%E3%82%AF%E3%82%A8%E3%83%AA,%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E5%87%BA%E6%9D%A5%E3%81%BE%E3%81%99%E3%80%82



-インデックス
テーブルの情報の検索時に、その対象としてよく使用するカラムの値だけを取り出して検索しやすいように手を加えて保存しておいたもの
例）特定の名前のカラムを取り出したい時、値を昇順に並び替えたもの（インデックス）
インデックスを作成することでテーブルとは別に検索用に最適化された状態で必要なデータだけがテーブルとは別に保存される

参考：
https://www.dbonline.jp/sqlite/index/index1.html#section1



テーマ：テストについて
-フロー
プログラムの命令や手続き、処理の流れのことを指す
矩形や矢印などを組み合わせてこれを図示したものをフローチャートという

参考：
http://e-words.jp/w/%E3%83%95%E3%83%AD%E3%83%BC.html#:~:text=%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E5%88%86%E9%87%8E,flow%EF%BC%89%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF%E5%8D%98%E3%81%AB%E3%83%95%E3%83%AD%E3%83%BC%E3%81%A8%E3%81%84%E3%81%86%E3%80%82



-単体テスト
数ある機能の単体機能をテストする
開発環境にてテストを行う
例）画面のボタン毎に動作を検証する

参考：
https://pm-rasinban.com/ut-it-st



-結合テスト
内部結合テストと外部結合テストの２種類
内部結合テストは、サブシステム内の機能連携を検証
外部結合テストは、サブシステム間の機能連携や、他システムとの機能連携を検証

参考：
https://pm-rasinban.com/ut-it-st




テーマ：チケット管理ツール
-チケット管理ツール
実施すべき作業や課題をチケットとして管理する方法
発生日や作業内容、優先度、担当者や期日を登録して管理する
プロジェクト全体の状況を把握する手段として活用される

参考：
https://it-trend.jp/project_management/article/33-0025#chapter-1



-タスク
コンピューターが処理する作業の最小単位を指す

参考：
https://news.mynavi.jp/article/20181113-722873/#:~:text=%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AF%E3%80%81%E4%BB%95%E4%BA%8B%E3%83%BB%E4%BD%9C%E6%A5%AD%E3%83%BB,%E3%81%AE%E3%81%93%E3%81%A8%E3%80%8D%E3%82%92%E6%8C%87%E3%81%97%E3%81%BE%E3%81%99%E3%80%82



テーマ：バージョン管理
-Git
ファイルのバージョン管理が簡単にできるツール
ファイルの編集管理ができるため、古いバージョンを残したまま新しいものを保存できる
できること
・古いバージョンに簡単に戻せる
・新旧のファイルを一元管理できる
・編集した履歴を複数人で共有できる
・複数人で修正した部分を一つに統合できる

参考：
https://design-plus1.com/tcd-w/2019/12/what-is-git.html



-SourceTree
GitをGUIで操作できるツール
メリット
・Mac/Winどちらでもすぐインストールできる
・無料で使える
・日本語対応している
・自分、他人の作業を見える化できるから安心

参考：
https://www.sejuku.net/blog/6111



-SVN (Subversion)
開発現場にて、使用されるソースコード管理システムのこと
コードの変更点といった履歴は全て中央リポジトリに記録される
-コンフリクト
マージする際、Gitは変更箇所を自動的に統合してくれるが、同じファイルの同じ場所で変更が同時にある場合、エラーが出る。この状態がコンフリクト

参考：
https://liginc.co.jp/241697



-デグレ
プログラムの修正やインフラ設定の変更等により、正常に機能が動作しなくなる品質低下のトラブルを指す

参考；
https://engineer-club.jp/degrade#i



-マージツール
チーム開発におけるコンフリクトの修正などの非生産的な作業を効率化する

参考：
https://codezine.jp/article/detail/10980



テーマ：その他
-ロジック
プログラムを処理するための内容や手順を指す



-デバッグ
プログラム内のバグや欠陥を発見・修正して動作を正常にするための作業



-開発手法(ウォーターフォール開発、アジャイル開発)
ウォーターフォール開発：工程を「企画」「設計」「実装」「テスト」に分割して開発を行う手法、後から機能を追加することはない

アジャイル開発：短期間で新たに機能を追加していく開発手法、開発中で仕様や機能追加がされる可能性があるプロジェクト向き



-アルゴリズム
ある問題を解決するために考えられた効率的な手順や計算方法を指す

参考：
https://products.sint.co.jp/topsic/blog/what-is-algorithm



-フローチャート図
作業の全体像の流れを記号などを使って視覚化するための方法

参考：
https://www.fastclassinfo.com/entry/points_for_flowchart#%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88%E3%83%95%E3%83%AD%E3%83%BC%E5%9B%B3%E3%81%A8%E3%81%AF



-設計書(外部設計、内部設計)
システム開発の計画を立てる工程を指す

外部設計：実際にシステムの仕様を決定する段階、要件定義で決定したシステムの機能要件や非機能要件、制約条件、外部とのやりとりなどをより具体的な使用にすることで、実際にプログラム可能な形にする

内部設計：外部設計の結果を実際にプログラミングできるようにシステム内部に特化した詳細な設計をする段階

参考：
https://hnavi.co.jp/knowledge/blog/external_design/?argument=bzcUT99h&dmai=a5d2ed13b808c0



-要件定義(要求仕様書)
どのようにシステム化するか、実装すべき機能や性能を決めるのが要件定義
要求はやりたいこと実現したいこと、要件がそれをどうすれば実現できるかといった解決策

参考：
https://www.google.com/search?q=%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9&oq=%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9&aqs=chrome..69i57j0l7.4508j0j4&sourceid=chrome&ie=UTF-8



-システム開発におけるテスト(単体テスト、結合テスト、総合テスト)
単体テスト：作成したプログラムを１つずつ単体で正常に動作するか個々のモジュール（部品）について機能や性能、運用性などをチェックする

結合テスト：単体テストを通過した複数のモジュールを組み合わせて連携が上手くいくか検証する

総合テスト：開発したシステム全体の要件を満たしているかをチェックする

参考：
https://pm-rasinban.com/ut-it-st



-テスト仕様書(どのようなもの、項目)
要求事項や設計諸元を満たすかどうかを検証するため、何をどのように確認して結果はどうあるべきかを予め設計するために必要な仕様書、第三者が再現でき客観的に判断できるように仕様書を作成する
要件定義書を読み、テストすべき機能を洗い出し、テストを行う機能を大項目に分類する。昨日のサイズに合わせて、中項目、小項目と分類する
参考：
https://elecs-softwaretest.com/colum/%E3%83%86%E3%82%B9%E3%83%88%E4%BB%95%E6%A7%98%E6%9B%B8%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9%E5%A4%A7%E5%85%AC%E9%96%8B%EF%BC%9A%E3%83%86%E3%82%B9%E3%83%88%E8%A8%AD%E8%A8%88%E3%81%AE%E6%89%8B%E9%A0%86/

https://qangaroo.jp/info/test-case-specification



-バリデーション
入力された値に対してチェックをする仕組みを指す
色々なオプションを付けられる

参考：
https://www.atmarkit.co.jp/ait/articles/0903/02/news125.html



-FW（フレームワーク）
プログラミング作業を効率的に進めるための反感製品のソフトウェアを指す
コードを記述する部分が少なくなり作業時間を削減できる

参考：
https://www.webstaff.jp/guide/jobcategory/engineer/java%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF/#:~:text=%E3%81%AE%E8%A8%98%E4%BA%8B%E4%B8%80%E8%A6%A7-,Java%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AF%E5%BF%85%E9%A0%88%EF%BC%9F,%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%91%E3%82%8B%E3%81%A7%E3%81%97%E3%82%87%E3%81%86%E3%80%82



-PHPのFW（フレームワーク）の種類と特徴
Laravel：AWSとの連携が容易にできる、初心者にも綺麗なコードが書ける
CakePHP：国内で最も利用されている、軽量で高速開発可
CodeIgniter：軽量で高速、規約が緩く自由度が高い
Symfony：大規模開発や企業向けプロジェクトで利用される、デバッグやテストツールが豊富
FuelPHP：軽量、小規模開発向け、CodeIgniterに似ている

参考：
https://kredo.jp/media/php-framework/



-Ajax (JavaScript＋XML)
非同期通信を可能にする仕組み
必要なデータのみをサーバーに送る非同期通信を利用することで、サーバーからレスポンスがなくとも他の作業ができる

参考：
https://qiita.com/hisamura333/items/e3ea6ae549eb09b7efb9



-API (Application Programming Interface)
自己のソフトウェアを一部公開することで、他のソフトウェアと機能を共有できるようにしたもの
アプリケーション同士で連携が可能

参考：
https://www.sejuku.net/blog/7087



-LAMP
オープンソースのソフトウェアの組み合わせを指す略称
Linux(OS), Apache(Webサーバー）, MySQL(データベース), PHP/Perl/Python(プログラミング)
DB連動型の動的なコンテンツを含むWebサイトの構築に適している

参考：
https://www.idcf.jp/words/lamp.html



-クラウドサーバー、レンタルサーバー、VPSの違い
クラウドサーバー：インターネット経由で、遠隔操作できる物理サーバー
レンタルサーバー：費用を支払い、借りるサーバー。１つのサーバーを複数人で共有する
VPS：実際には共用サーバーでありながら、仮想的に専用サーバーと同等の機能・能力を与えた仮想専用サーバー

参考：
https://www.kagoya.jp/howto/rentalserver/basic-03/#:~:text=%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%A8%E3%81%AF%E3%80%81%E6%96%87%E5%AD%97%E9%80%9A%E3%82%8A,%E3%81%A7%E3%80%81%E6%BC%A0%E7%84%B6%E3%81%A8%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82



-AWS
Amazonが提供しているクラウドサービスの総称
Webサイトの運用、データのバックアップ、ビッグデータ分析、IoTソリューションの構築、業務アプリの利用、AI機能の利用が可能

参考：
https://business.ntt-east.co.jp/content/cloudsolution/column-01.html#section-01



-プラットフォーム
あるアプリケーションが動作するのに必要な環境を指す
どのアプリケーションから見るかで、プラットフォームは変わる

参考：
https://www.geekly.co.jp/column/cat-technology/1903_061/



-カバレッジ
テストがどの程度網羅的に実行されたかを割合で表したもの
これを測定・分析することで、品質向上に役立つ
単体テストでは、コードに対してカバレッジでテストの品質を測ることが一般的

参考：
https://www.techmatrix.co.jp/t/quality/coverage.html



-エビデンス
最終検証段階にて、システムが発注通り動作することを示す証拠となる書類やデータ等を指す
画面を印刷したものやシステムにより生成されたデータファイルが用いられることが多い

参考：
http://e-words.jp/w/%E3%82%A8%E3%83%93%E3%83%87%E3%83%B3%E3%82%B9.html#:~:text=IT%E3%81%AE%E5%88%86%E9%87%8E%E3%81%A7%E3%81%AF%E3%80%81%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0,%E7%94%A8%E3%81%84%E3%82%89%E3%82%8C%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E5%A4%9A%E3%81%84%E3%80%82



-コンパイル
プログラム言語をコンピューターが理解できる言語に変換するソフトウェア
Javaの場合、どのPCでも理解できる中間言語を作成した後、各PCにインストールされた仮想マシンが翻訳して実行する

参考：
https://eng-entrance.com/java-basic-compile



-バッチ処理
一定量または一定期間の集計データを一括処理する方法

参考：
https://www.imkk.jp/blog/what-is-batch-processing.html



-デプロイ(意味と方法、FTPソフトの種類)
開発した機能やサービスを利用できる応対にする作業を指す
作成いstatus プログラムをサーバーにアップロードして、サーバー環境で利用可能にする
開発環境からテスト用の環境へアップロードしてテストできる状態にする
FFFTP、Cyberduck、FileZilla等

参考：
https://www.weblio.jp/content/%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4



-データベース接続クライアント(説明、代表的なもの)
データベース管理システム(DBMS)や関係データベース管理システム(RDBMS)上のデータを容易に扱うためのソフトウェア
代表的なものにOracle Databaseへの接続がある

参考：
https://www.weblio.jp/content/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E6%8E%A5%E7%B6%9A%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88



-Gitホスティングサービス(説明、代表的なもの)
Gitにおるクラウドベースのバージョン管理サービスを指す
代表的なものにBitBucket、GitLab、Assemblaがある

参考：
https://www.internetacademy.jp/it/server/server-basic/git-hosting-service-github-clone.html#:~:text=%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E4%BF%9D%E7%AE%A1%E5%BA%AB%E3%81%A7,%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A7%E3%81%99%E3%80%82



-チケット管理ツール(説明、代表的なもの)
タスク管理ツールのことで、プロジェクトごとに発生するタスクを発行して管理する
代表的なものにWrike, Redmine, Backlog, Trelloがある

参考：https://wb-hp.com/blog/2019/07/08/ticket-management.html



-DBのJOINとは
DBに存在する複数のテーブルを結合する際に使われるSQLの命令文
→ 欲しい情報同士を組み合わせることが可能
内部結合と外部結合がある
例）SELECT * FROM テーブル1
　　JOIN テーブル2 ON 結合の条件
　　テーブル1にある値が条件と合致した時、テーブル2と結合する

参考：
https://www.sejuku.net/blog/73650



-SEO　Search Engine Optimization
Webサイトの最適化を通じて、当該サイトを検索結果の上位に来るようにする方法

参考：
https://www.gyro-n.com/seo/hack/seo-point/#about-seo

