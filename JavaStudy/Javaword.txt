■ 開発
・ウォーターフォール開発
上流工程から下流工程へ順次移行していく開発手法

・アジャイル開発
初めから厳密な仕様は決めず、おおよその仕様だけで開発をして、小単位での「実装→テスト実行」を繰り返し、徐々に開発を進めていく手法で　

・マイグレーション
開発言語などを別のプラットフォームに移行したり、新しいシステムに切り替えたりすること

・デグレーション
プログラムを修正した時、正常に動作しなくなるトラブル

・デプロイ
ネットを通じて提供されるWebアプリケーションなどのシステム開発工程において、システムを利用可能な状態にすること

・コンフリクト
同時に複数の更新が発生して、データの整合性が取れなくなること

・開発環境（ローカル）
実際のサーバーにアップする前に、サイトの動作や表示確認を自身のパソコン内で行うこと

・検証環境（ステージング）
システム公開前に、本番環境と同じ環境で動作や表示などの最終確認を行う段階

・本番環境
システムが製品として実際に稼動している環境

・設計書／仕様書
開発時に備えるべき機能やその性能、満たすべき要件などを図表や文章などで記述した文書

・要件定義
実装すべき機能や満たすべき性能などのを明確にしていく作業

・基本設計書
要件定義と詳細設計の中間で、機能や構成などの大枠や基本的な仕様を決める工程

・詳細設計書
定義された要素の仕様や動作の詳細を定義する工程

・単体テスト（UT）　Unit Test
プログラムの手続きや関数について動作検証を行う手法

・結合テスト（CT／IT） Combine Test/Integrarion Test
手続きや関数といった機能を結合させて、うまく連携・動作しているかを確認するテスト

・総合テスト（ST）System Test
機能や性能が仕様書通りに構築できているかの検証

・エビデンス／証跡
最終検証段階においてシステムが発注どおりに動作している証拠となる書類やデータ

・データパッチ
ソフトに変更を加えるために用意された、後付けのプログラムのこと

・Access
システムなどを利用可能な状態にすること

・マクロ
事前に操作手順などを記録しておいて、その記録した内容をまとめて実行できるようにする機能のこと

・VBA
簡易なプログラムを記述して実行することで複雑な処理の自動化などを行なうもの

・GAS（Google Apps Script）
Googleが提供しているJavaScriptをベースにしたプログラミング言語

・API Application Programming Interface
アプリケーションの開発を容易にするためのソフトウェアの資源

・WEB API
コンピュータプログラムの提供する機能を外部の別のプログラムから呼び出して利用するための手順・規約

・REST API
Webシステムを外部から利用するためのプログラムの呼び出し規約

・SOAP Simple Object Access Protocol
異なるコンピュータ上で動作するプログラム同士が連携して動作するための通信プロトコル

・Ajax　Asynchronous JavaScript + XML
JavaScriptを使って非同期通信して、動的に表示内容を変更する手法

・XML　Extensible Markup Language
文書やデータの意味や構造を記述するためのマークアップ言語の一つ

・JSON　JavaScript Object Notation
JavaScriptによるオブジェクトの表記法を応用したデータ形式

・ステータスコード
HTTPリクエストの結果を表す3桁の数字

・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
ホームページを表示したときに、複数のドメインからデータを持ってくるようになっている状態のこと

・バリデーション
対象が適切に記述されているかを検証すること

・データ連携
アプリケーションやシステム、格納先がそれぞれ異なるデータを共有・活用すること

・Daemon　デーモン
UNIX系OSの常駐プログラムのこと

・CRON クローン
デーモンの一種で、UNIX系のOSに入っているプログラム

・バッチ
まとめて行う処理のこと

・ログ
起こった出来事についての情報などを記録するデータ

・CSV
Excelで開くと整形されるデータファイル

・TSV Tab Separated Values
項目がタブで区切られている書式

・プルリクエスト（マージリクエスト）
コードの変更をレビュワーに通知し、マージを依頼する機能



■ チケット管理ツール
・asana
シンプルなプロジェクト管理ツールで、タスクごとにコメントができる

・Backlog
プロジェクト管理ツールで、ガントチャートで可視化したもの

・Jooto
カスタマイズができる

・Redmine
プロジェクト管理ができるオープンソースソフトウェア

・Trello
ふせんを貼ったりはがしたりする感覚で、タスクが管理できるツール



■ バージョン管理
・集中型
一つのリポジトリに接続して、複数人で使用する

・分散型
利用者のパソコンにリポジトリを持った上で使用する

・Github
コードを保存して、世界に公開できるサービス

・SourceTree
Gitの操作ができる無料のデスクトップアプリケーション

・Tortoise SVN
SVNのクライアントで、Windowsのシェルエクステンションとして機能

・Git Flow
ブランチを活用したGitの開発手法・ツール
参考：
https://qiita.com/KosukeSone/items/514dd24828b485c69a05

・master
リリースしたデータを置いておくブランチ

・release
リリース前に準備、微調整をおこなうブランチ

・develop
開発をおこなうためのブランチ

・feature
開発をおこなうためのブランチで、個々の機能の実装やバグの解決を行う



■ FW／ライブラリ
・FW　Framwork
開発に便利な機能をまとめたツール

・Spring Framework
JavaのWEBフレームワークで、WEBアプリが作成可能

・Struts
Javaでwebアプリを作成できるフレームワーク

・JSF（Java Server Faces）
Javaでwebアプリを作成できるフレームワーク、Oracle社が開発した

・ライブラリ
複数のプログラムを一つにまとめたもの

・Bootstrap
CSSのフレームワークであり、簡単に整ったデザインのページ作成が可能

・Flyway
データベースのマイグレーションツール、複数人でのアプリ開発時のDBマイグレーション作業を簡単に行える

・Jackson
Javaで使えるJSONライブラリ

・jQuery
JavaScriptをより簡単に記述できるJSのライブラリ

・Junit
Javaプログラムの単体テストを行うためのツール

・Log4j
 Javaプログラム用のログAPI 

・Lombok
Java冗長なコードを簡潔にしてくれるライブラリ

・ORM
オブジェクト指向とデータベースを上手く変換して繋いでくれるもの



■ 連絡ツール
・ChatWork
ビジネスコミュニケーションに特化したチャットツール

・Slack
ソースコードの共有ができるチャットツール

・IP Messenger
LAN専用のメッセンジャーソフト



■ Java
・Javadoc
プログラムについて説明するドキュメントをソースコードに埋め込むためのもの

・アノテーション
@を付けることで、補足情報を記載できる

・メモリ管理
コンピュータのメモリを管理するもの

・ヒープ
システムが利用するメモリ領域のこと

・GC　garbage collection
不要になったメモリだけを解放してくれる機能

・GoF The Gang Of Four
有名なデザインパターンの１つ

・デザインパターン
オブジェクト指向の言語で使われる設計パターン



■ その他
・オブジェクト指向
機能ごとに部品化することで、作業効率と保守性の向上を目的とする考え方

・バッチ処理
まとめて行う処理のこと

・コンパイル
プログラミング言語で書かれたコードをコンピュータに理解できるコードに変換すること

・カバレッジ
テストで実行された命令の割合を指す

・プラットホーム
システムを動かすための環境